4.1 Components Details
- table/tbody/tr -> not table/tbody/row, component will be outside
  - <tr is="row"></tr>
  -ui/li
  -select/option
- In components define, data should be a function and has a return
- use emit fire event and pass value to parent
- use $refs to get all component and do counter

4.2 Value pass
- parent -> child
  - :bind -> props
- child should not change props value from parent
  - single data flow
  - clone parent props into local var and operate
- child -> parent
  - fire event
  - emit(event, params)

4.3 params validation and props
- props{
    count: {
      type: [String,Number],
      required: true,
      default: 'default',
      validator: function(value){
        return (value.length > 5);
      },
    }
  }
- HTML bind data and Components Props has same name props
  - not show in dom
  - use {{props}} in components
- HTML bind data and Components not defined in props    
  - can not use in components
  - show in dom

4.4 Bind native event to Components
- as before use emit call parent function
- add @click.native="parent function"

4.5 value pass between non-related components
- 1--- 2 --- 3
- 1 props 2, 2 emit 1
- 1 p 2 p 3, 3 e 2 e 1
- more complex situations
- VUEX
  - data framework
- subscribe/BUS
  - Vue.prototype.bus = new Vue();
  - this.bus.$on("change", function (msg) {
            console.log(this);
            this_.selfContent = msg;
          });

4.6 Slot
  for component tag, pass data to child 
  if child component just use it as dom object, could use slot
  <child>
    <p>app</p>
  </child>
  template: '<div>
              <slot></slot>
            </div>'
  slot content could be identified by name          
  <child>
    <p slot='header'>app</p>
    <p slot='footer'>app</p>
  </child>
  template: '<div>
              <slot name='header'>default value</slot>
              <div>something</div>
              <slot name='footer'></slot>
            </div>'

4.7 Context Slot
 if child need to use the custom dom from parents
 - normally in for case
 - js part:
    <slot v-for="item of list" :item=item></slot>
    - parent will pass a item value
 - html part:
    <child>
      <template slot-scope="scopeName">
        <h1>{{scopeName.item}}</h1>
      </template>
    </child>
  - analysis
    <div>item</div>
    -> v-for will generate item
    -> slot set item into scopeName
    -> render slot as dom

4.8 Dynamic Components & v-once
- Dynamic Components
  -HTML
    <component :is='type'></component>
  -type = component name
- v-once
  - for dynamic component create/destroy
    - dom operation and performance latency
  - template: <div v-once>aaaaa</div>
  - put component into cache/memory